import { test, expect } from '@playwright/test';

test('has title', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Expect a title "to contain" a substring.
  await expect(page).toHaveTitle(/Playwright/);
});

test('get started link', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Click the get started link.
  await page.getByRole('link', { name: 'Get started' }).click();

  // Expects page to have a heading with the name of Installation.
  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();
});

test('has correct title', async ({ page }) => {
  await page.goto('https://material.playwrightvn.com/');

  // Expect the title to contain "T√†i li·ªáu h·ªçc automation test"
  await expect(page).toHaveTitle(/T√†i li·ªáu h·ªçc automation test/);
});

test('go to Register Page and check heading', async ({ page }) => {
  await page.goto('https://material.playwrightvn.com/');

  // Click on the link with text "B√†i h·ªçc 1: Register Page"
  await page.getByRole('link', { name: 'B√†i h·ªçc 1: Register Page' }).click();

  // Expect to see heading "User Registration"
  await expect(page.getByRole('heading', { name: 'User Registration' })).toBeVisible();
});

// test('Game "ƒêi ch·ª£"', async ({ page }) => {
//   await page.goto('https://material.playwrightvn.com/games/001-di-cho.html');
  
//   // B∆∞·ªõc 1: L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng "Danh s√°ch ƒëi ch·ª£"
//   // Ch·ªù b·∫£ng load xong
//   await page.waitForSelector('table');
  
//   // L·∫•y t·∫•t c·∫£ c√°c rows trong tbody c·ªßa b·∫£ng ƒë·∫ßu ti√™n
//   const rows = page.locator('table').first().locator('tbody tr');
//   const items: Record<string, number> = {};
//   const count = await rows.count();
//   console.log(`üì¶ S·ªë d√≤ng t√¨m ƒë∆∞·ª£c trong b·∫£ng: ${count}`);
  
//   // L·∫∑p qua t·ª´ng row ƒë·ªÉ l·∫•y d·ªØ li·ªáu
//   for (let i = 0; i < count; i++) {
//     const row = rows.nth(i);
    
//     // L·∫•y t√™n m√≥n ƒÉn t·ª´ c·ªôt ƒë·∫ßu ti√™n
//     const nameCell = row.locator('td').nth(0);
//     const name = await nameCell.innerText();
    
//     // L·∫•y s·ªë l∆∞·ª£ng t·ª´ c·ªôt th·ª© hai
//     const quantityCell = row.locator('td').nth(1);
//     const quantityText = await quantityCell.innerText();
//     const quantity = parseInt(quantityText.trim());
    
//     // L∆∞u v√†o object
//     const cleanName = name.trim();
//     items[cleanName] = quantity;
//     console.log(`üõí M√≥n: ${cleanName} - S·ªë l∆∞·ª£ng: ${quantity}`);
//   }
  
//   console.log('‚úÖ Danh s√°ch ƒë·∫ßy ƒë·ªß:', items);
  
//     // Helper function: Quay v·ªÅ trang 1
//   async function goToFirstPage() {
//     console.log(`üîÑ Quay v·ªÅ trang 1`);
//     while (true) {
//       const prevPageButton = page.locator('button').filter({ hasText: 'Trang tr∆∞·ªõc' });
//       const prevPageExists = await prevPageButton.count() > 0;
      
//       if (prevPageExists) {
//         await prevPageButton.click();
//         await page.waitForTimeout(300);
//       } else {
//         console.log(`‚úÖ ƒê√£ ·ªü trang 1`);
//         break;
//       }
//     }
//   }
  
//   // B∆∞·ªõc 2: L·∫∑p qua danh s√°ch gi·ªè h√†ng, t√¨m ki·∫øm v√† click n√∫t + ƒë·ªÉ tƒÉng s·ªë l∆∞·ª£ng
//   for (const [itemName, quantity] of Object.entries(items)) {
//     console.log(`üîç T√¨m ki·∫øm m√≥n: ${itemName} v·ªõi s·ªë l∆∞·ª£ng: ${quantity}`);
    
//     // Lu√¥n b·∫Øt ƒë·∫ßu t√¨m ki·∫øm t·ª´ trang 1 cho m·ªói m√≥n
//     await goToFirstPage();
    
//     let itemFound = false;
//     let currentPage = 1;
//     const maxPages = 10; // Gi·ªõi h·∫°n s·ªë trang ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
    
//     // T√¨m ki·∫øm item qua c√°c trang
//     while (!itemFound && currentPage <= maxPages) {
//       console.log(`üìÑ ƒêang t√¨m ki·∫øm ·ªü trang ${currentPage}`);
      
//       // Ki·ªÉm tra xem item c√≥ t·ªìn t·∫°i tr√™n trang hi·ªán t·∫°i kh√¥ng
//       const itemLocator = page.locator('div').filter({ hasText: itemName });
//       const itemCount = await itemLocator.count();
      
//       if (itemCount > 0) {
//         console.log(`‚úÖ T√¨m th·∫•y m√≥n ${itemName} ·ªü trang ${currentPage}`);
        
//         // T√¨m row ch·ª©a item
//         const itemRow = itemLocator.first().locator('xpath=ancestor::div[contains(@class,"flex") or contains(@class,"row")][1]');
        
//         // T√¨m n√∫t + trong row ƒë√≥
//         const plusButton = itemRow.locator('button').filter({ hasText: '+' });
        
//         // Ki·ªÉm tra s·ªë l∆∞·ª£ng hi·ªán t·∫°i
//         const currentQuantityInput = itemRow.locator('input[type="number"]');
        
//         // Click n√∫t + ƒë·ªÉ tƒÉng s·ªë l∆∞·ª£ng ƒë·∫øn ƒë√∫ng gi√° tr·ªã
//         for (let i = 0; i < quantity; i++) {
//           await plusButton.click();
//           console.log(`‚ûï Clicked + cho ${itemName}, l·∫ßn ${i + 1}/${quantity}`);
//           await page.waitForTimeout(100); // ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c l·∫ßn click
//         }
        
//         // Ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng cu·ªëi c√πng
//         const finalQuantity = await currentQuantityInput.inputValue();
//         console.log(`‚úÖ S·ªë l∆∞·ª£ng cu·ªëi c√πng cho ${itemName}: ${finalQuantity}`);
        
//         itemFound = true;
//         break;
//       }
      
//       // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ chuy·ªÉn sang trang ti·∫øp theo
//       const nextPageButton = page.locator('button').filter({ hasText: 'Trang sau' });
//       const nextPageExists = await nextPageButton.count() > 0;
      
//       if (nextPageExists) {
//         console.log(`‚û°Ô∏è Chuy·ªÉn sang trang ti·∫øp theo`);
//         await nextPageButton.click();
//         await page.waitForTimeout(500); // ƒê·ª£i trang load
//         currentPage++;
//       } else {
//         console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t trang ti·∫øp theo`);
//         break;
//       }
//     }
    
//     if (!itemFound) {
//       console.log(`‚ùå Kh√¥ng t√¨m th·∫•y m√≥n ${itemName} trong t·∫•t c·∫£ c√°c trang`);
//     }
//   }
  
//   // B∆∞·ªõc 3: B·∫•m n√∫t "Ki·ªÉm tra k·∫øt qu·∫£"
//   page.once('dialog', async dialog => {
//     const message = dialog.message();
//     console.log(`üì¢ Dialog message: ${message}`);
//     expect(message).toContain('B·∫°n ƒë√£ ƒëi ch·ª£ ch√≠nh x√°c!');
//     await dialog.accept(); // ƒë√≥ng popup
//   });
  
//   // Click n√∫t ki·ªÉm tra k·∫øt qu·∫£
//   await page.getByRole('button', { name: 'Ki·ªÉm tra k·∫øt qu·∫£' }).click();
  
//   // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ dialog xu·∫•t hi·ªán
//   await page.waitForTimeout(1000);
// });



test.describe('Frapp√© Login Tests', () => {
  test.beforeEach(async ({ page }) => {
    // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
    await page.goto('https://your-frappe-site.com/login');
  });

  test('Successful login with valid credentials', async ({ page }) => {
    // Nh·∫≠p email
    await page.fill('input[type="email"]', 'jane@example.com');
    
    // Nh·∫≠p password
    await page.fill('input[type="password"]', 'your_password_here');
    
    // Click n√∫t Login
    await page.click('button:has-text("Login")');
    
    // Verify successful login (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh selector theo trang ƒë√≠ch)
    await expect(page).toHaveURL(/dashboard|home/);
  });

  test('Login with Email Link functionality', async ({ page }) => {
    // Nh·∫≠p email
    await page.fill('input[type="email"]', 'jane@example.com');
    
    // Click n√∫t "Login with Email Link"
    await page.click('button:has-text("Login with Email Link")');
    
    // Verify message hi·ªÉn th·ªã th√¥ng b√°o g·ª≠i email
    await expect(page.locator('text=Check your email')).toBeVisible();
  });

  test('Show/Hide password functionality', async ({ page }) => {
    // Nh·∫≠p password
    await page.fill('input[type="password"]', 'testpassword');
    
    // Click n√∫t Show
    await page.click('button:has-text("Show")');
    
    // Verify password field chuy·ªÉn th√†nh text type
    await expect(page.locator('input[type="text"]')).toHaveValue('testpassword');
    
    // Click l·∫°i ƒë·ªÉ hide
    await page.click('button:has-text("Hide")');
    
    // Verify password field chuy·ªÉn v·ªÅ password type
    await expect(page.locator('input[type="password"]')).toHaveValue('testpassword');
  });

  test('Forgot Password functionality', async ({ page }) => {
    // Click link "Forgot Password?"
    await page.click('a:has-text("Forgot Password?")');
    
    // Verify ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang reset password
    await expect(page).toHaveURL(/forgot-password|reset-password/);
  });

  test('Validation for empty fields', async ({ page }) => {
    // Click Login button khi ch∆∞a nh·∫≠p g√¨
    await page.click('button:has-text("Login")');
    
    // Verify error messages ho·∫∑c validation
    await expect(page.locator('input[type="email"]:invalid')).toBeVisible();
  });

  test('Validation for invalid email format', async ({ page }) => {
    // Nh·∫≠p email kh√¥ng h·ª£p l·ªá
    await page.fill('input[type="email"]', 'invalid-email');
    await page.fill('input[type="password"]', 'password123');
    
    // Click Login
    await page.click('button:has-text("Login")');
    
    // Verify validation message
    await expect(page.locator('input[type="email"]:invalid')).toBeVisible();
  });

  test('UI elements visibility and styling', async ({ page }) => {
    // Verify logo hi·ªÉn th·ªã
    await expect(page.locator('img, [role="img"]').first()).toBeVisible();
    
    // Verify heading "Login to Frapp√©"
await expect(page.locator('h1, h2, h3').filter({ hasText: 'Login to Frapp√©' })).toBeVisible();
    
    // Verify form fields hi·ªÉn th·ªã
    await expect(page.locator('input[type="email"]')).toBeVisible();
    await expect(page.locator('input[type="password"]')).toBeVisible();
    
    // Verify c√°c buttons hi·ªÉn th·ªã
    await expect(page.locator('button:has-text("Login")')).toBeVisible();
    await expect(page.locator('button:has-text("Login with Email Link")')).toBeVisible();
    
    // Verify "or" separator
    await expect(page.locator('text=or')).toBeVisible();
  });
});